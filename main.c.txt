#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void reduce() {
    FILE *input_file = fopen("input.txt", "r");
    if (input_file == NULL) {
        printf("Error opening input file.\n");
        return;
    }

    int count = 0;
    char line[20];
    while (fgets(line, sizeof(line), input_file) != NULL) {
        count++;
    }

    int c2 = count;
   // char *list_M[count][c2];

    //char *list_M[count][c2];
    //char *list_N[count][c2];
    //---------------------------------------------------------

    char** list_M = (char**)malloc(count * sizeof(char*));
    // Allocate memory for the columns in each row
    for (int i = 0; i < count; i++) {
        list_M[i] = (char*)malloc(count * sizeof(char));
    }


    char** list_N = (char**)malloc(count * sizeof(char*));
    // Allocate memory for the columns in each row
    for (int i = 0; i < count; i++) {
        list_N[i] = (char*)malloc(count * sizeof(char));
    }


    //---------------------------------------------------------
    
    int m1 = 0, n1 = 0;
    int m2=0, n2=0;

    fseek(input_file, 0, SEEK_SET);
   char ch1[2] ;
    
    while (fgets(line, sizeof(line), input_file) != NULL)
     {
        line[strcspn(line, "\n")] = 0;
        char *token = strtok(line, ":");
        while (token != NULL) {

            if (strcmp(token, "M") == 0)
             {
                
                list_M[m1][m2++] = line[0];
                list_M[m1][m2++] = line[2];
            
                 
                char *aa = strdup("M");
                list_M[m1][m2++] = *aa;
               
                char *bb =  strdup(strtok(NULL, ","));
                list_M[m1][m2++] = *bb;
                char *cc= strdup(strtok(NULL, ","));
                list_M[m1][m2++] = *cc; 
                m1++;
                m2=0;
            
            } 
         
            else if (strcmp(token, "N") == 0)
             {
                list_N[n1][n2++] = line[0];
                list_N[n1][n2++] = line[2];

                 char *aa= strdup("N");
                list_N[n1][n2++] = *aa;

                char *bb = strdup(strtok(NULL, ","));
                list_N[n1][n2++] = *bb;
                
                char *cc =  strdup(strtok(NULL, ","));
                list_N[n1][n2++] =*cc;
                n1 += 1;
                n2=0;
            }





            token = strtok(NULL, ",");
        }
    }
         /*
         
                 printf("M values:\n");
                    for (int i = 0; i < m1; i++) {
                        for(int j=0;j < 5 ;j++){ 
                        printf("%c ", list_M[i][j]);
                        }
                        printf("\n");
                    }
                    printf("\n");

                    printf("N values:\n");
                    for (int i = 0; i < n1; i++) {
                        for(int j=  0;j < 5 ;j++){ 
                        printf("%c ", list_N[i][j]);
                        }
                        printf("\n");
                    }
                    printf("\n");
*/

     char keyvaluepair[20];
        int size = m1;
    int result=0;

char distinct[m1][m1];
for (int i = 0; i < m1; i++) {
    for (int j = 0; j < m1; j++) {
        distinct[i][j] = 0;
    }
}
int co = 0;
    int found=0;
for (int i = 0; i < size; i++) {
        found = 0;
        // check if the current element is already in the distinct array
        for (int j = 0; j < count; j++) {
            if ((list_M[i][0]) == distinct[j][0] && (list_M[i][1])== distinct[j][1] ){
                found = 1;
                break;
            }
        }
        // if the current element is not in the distinct array, add it
        if (!found) {
            distinct[co][0] = list_M[i][0];
            distinct[co][1] = list_M[i][1];
            co++;
        }
    }
    /*
printf("Distinct groups:\n");
    for (int i = 0; i < co; i++) {
        printf("(%c,%c)\n", distinct[i][0],distinct[i][1]);
    }*/
    FILE *ptr;
    ptr = fopen("Final.txt","w");

char *ress[50];
int res = 0;
int First=0;
int Second=0;
    for (int i =0;i<co;i++)
    {
        char m_a  = distinct[i][0];
        char m_b = distinct[i][1];

        for (int j = 0;j < size;j++)
        {
            char n_a = list_N[j][0];
            char n_b = list_N[j][1];


            if ( m_a == n_a && m_b == n_b)
                {

                    if(list_M[j][3] == list_N[j][3])
                      {
                        First =   atoi(&list_M[j][4]);
                       Second=   atoi(&list_N[j][4]);
                        //First = strtol(list_M[j][4],NULL,10);
                        //Second = strtol(list_N[j][4],NULL,10);
                        res += First*Second;
                       
                      }
                      else
                      continue;
                }
                
                else
                    continue;

        }

            printf("%c,%c : %d\n",distinct[i][0],distinct[i][1],res);
            fprintf(ptr,"%c,%c : %d\n",distinct[i][0],distinct[i][1],res);

                     //   sprintf(*ress, "%d", res);
                     //   strcat(keyvaluepair,*ress);
                      //  strcat(keyvaluepair," ");
                        res = 0;
                       // *ress= 0;
    }    
   // printf("%s\n",keyvaluepair);
    

    fclose(input_file);
    fclose(ptr);
}

int main() {
    reduce();
    return 0;
}
